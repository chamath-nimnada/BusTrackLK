// 1. Ensure AuthScreen import is present and correct
import 'package:driver_ui/screens/auth_screen.dart';
import 'package:driver_ui/services/auth_service.dart';
import 'package:driver_ui/utils/app_colors.dart';
import 'package:driver_ui/utils/language_provider.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:provider/provider.dart';
import 'package:firebase_core/firebase_core.dart';
// Assuming firebase_options.dart exists in lib/ (generated by flutterfire configure)
import 'package:driver_ui/firebase_options.dart';

void main() async {
  // Ensure Flutter framework is initialized before anything else
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase using the generated options file
  // Handle potential initialization errors here
  FirebaseApp? firebaseApp;
  try {
    firebaseApp = await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
    print("Firebase Initialized Successfully!");
  } catch (e) {
    print("!!!!!!!! FIREBASE INITIALIZATION FAILED !!!!!!!");
    print("Error: $e");
    // Optionally, run a different app widget that just shows the error
    // runApp(FirebaseErrorApp(error: e));
    // return; // Stop execution if Firebase fails critically
  }

  // If Firebase initialized (or if we decide to proceed despite error), run the main app
  runApp(
    // Use MultiProvider to provide multiple services down the widget tree
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (context) => LanguageProvider()),
        Provider(create: (context) => AuthService()), // Provide AuthService
      ],
      // Ensure MyApp constructor call is const
      child: const MyApp(),
    ),
  );
}

// Main Application Widget (Stateless as Firebase is init in main)
class MyApp extends StatelessWidget {
  // Ensure const constructor
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    // Directly return MaterialApp as Firebase should be ready
    // (Error handling for init failure is now in main())
    return MaterialApp(
      title: 'Driver UI',
      debugShowCheckedModeBanner: false, // Set to false for release builds
      theme: ThemeData(
        primarySwatch: Colors.blue, // Base color scheme
        scaffoldBackgroundColor: AppColors.kBackgroundColor, // Dark background
        // Apply GoogleFonts.inter as the default text theme
        textTheme: GoogleFonts.interTextTheme(
          Theme.of(context).textTheme,
        ).apply(bodyColor: AppColors.kPrimaryTextColor), // Default text color
        useMaterial3: true, // Use modern Material 3 design elements
      ),
      // AuthScreen should now be recognized because of the import at the top
      home: const AuthScreen(),
    );
  }
}

// --- Helper Widgets ---
// Removed _LoadingScreen and _ErrorScreen as FutureBuilder is removed from MyApp
// Basic loading/error handling would now need to be implemented differently if
// main() allowed the app to run despite Firebase init failure.
// For now, if init fails, the app might not start or show a native crash.

